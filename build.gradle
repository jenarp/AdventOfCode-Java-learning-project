buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.5.5")
    }
}

plugins {
    id 'java'
    id "com.moowork.node" version "1.2.0"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.moowork.node"

node {
//    version = '14.18.0'
    version = '10.14.1'
    download = true
    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")
    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/frontend")
}

bootJar {
    archiveBaseName = 'gs-spring-boot'
    archiveVersion = '0.1.0'
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

group 'org.haffson'
version '1.0-SNAPSHOT'

sourceCompatibility = 15
targetCompatibility = 15

ext {
    snippetsDir = file('target/snippets')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'
    implementation 'org.postgresql:postgresql:42.2.24'
    implementation 'org.liquibase:liquibase-core'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation 'org.mockito:mockito-inline:3.12.4'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation 'com.tngtech.archunit:archunit:0.21.0'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

if (Boolean.valueOf(System.getenv("FE_BUILD"))) {
    task npmRunScriptBuild(type: NpmTask, dependsOn: 'npmTest') {
        args = ['run-script', 'build:jar']
        execOverrides {
            it.workingDir = 'frontend'
        }
    }

    task npmTest(type: NpmTask, dependsOn: 'npmInstall') {
        args = ['test']
    }

    npmSetup.dependsOn nodeSetup
    npmInstall.dependsOn npmSetup
    npmTest.dependsOn npmInstall
    npmRunScriptBuild.dependsOn npmTest

    /** processResources is part of the jar task and copies production resources into the production
     *  resources directory. This should only happen after then npmRunScriptBuild has generated those
     *  resources.
     */
    processResources.dependsOn npmRunScriptBuild
}